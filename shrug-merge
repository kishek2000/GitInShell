#!/bin/dash

if ! test -d ".shrug"; then
    >&2 echo "shrug-merge: error: no .shrug directory containing shrug repository exists"
    exit 1
fi

branch=`cat ".shrug/branch.txt" | head -1`
log_master=".shrug/.$branch/.log/log.txt"
commits=`wc -l $log_master | sed 's/ /,/' | cut -d, -f1`

if test $commits -eq 0; then
    >&2 echo "shrug-merge: error: your repository does not have any commits yet"
    exit 1
fi

if test $# -ge 0; then
    test $# -eq 0 &&
    >&2 echo "usage: shrug-merge <branch|commit> -m message" &&
    exit 1
    
    test $# -gt 1 && test "$2" != "-m" &&
    >&2 echo "usage: shrug-merge <branch|commit> -m message" &&
    exit 1

    test $# -eq 2 &&
    >&2 echo "usage: shrug-merge <branch|commit> -m message" &&
    exit 1
fi

if  test $# -eq 1 || test "$3" = ""; then
    >&2 echo "shrug-merge: error: empty commit message"
    exit 1
fi

if ! test -d ".shrug/.$1"; then
    >&2 echo "shrug-merge: error: unknown branch '$1'"
    exit 1
else
    error="false"
    errorfiles=""
    copyall="false"

    for file in .shrug/.$1/.files/*
    do  
        filename=`basename $file`
        test "$filename" = "*" && continue
        if test -f $filename; then
            latest_branch_version=`ls ".shrug/.$1/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1 | sort | tail -1`
            latest_current_version=`ls ".shrug/.$branch/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1 | sort | tail -1`

            ## what we need to do here is ensure that we don't work with any untracked, uncommitted files:
            test "$latest_branch_version" = "" && test "$latest_current_version" = "" && copyall="true" && continue

            branch_versions=`ls ".shrug/.$1/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1`
            current_versions=`ls ".shrug/.$branch/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1`

            latest_common=""
            for version in $branch_versions
            do  
                if test -f ".shrug/.$branch/.log/$version-$filename"; then
                    latest_common="$version-$filename"
                fi
            done

            latest_common_commit=".shrug/.$branch/.log/$latest_common"
            if test $latest_current_version -gt $latest_branch_version; then

                ## let's quickly check that the branch we are trying to merge, hasn't been merged in already.
                merged=0
                for branch_files in .shrug/.$1/.files/*
                do
                    if test -f ".shrug/.$branch/.merged/$filename"; then
                        branch_and_merged=`diff ".shrug/.$branch/.merged/$filename" ".shrug/.$1/.log/$latest_branch_version-$filename" | wc -l`
                        test $branch_and_merged -eq 0 && merged=$(($merged + 1))
                    else
                        merged=0
                        break
                    fi
                done
                test $merged -gt 0 && >&2 echo "Already up to date" && exit 0

                changes_branch=`diff "$latest_common_commit" ".shrug/.$1/.log/$latest_branch_version-$filename" |
                egrep -v "(status|bin|log).txt" | 
                egrep "[0-9][cad][0-9]"`
                # cut -d ' ' -f1`
                changes_current=`diff "$latest_common_commit" ".shrug/.$branch/.log/$latest_current_version-$filename" |
                egrep -v "(status|bin|log).txt" | 
                egrep "[0-9][cad][0-9]"`

                num_changes_branch=`echo "$changes_branch" | wc -l`
                num_changes_current=`echo "$changes_current" | wc -l`
                ## in this method of checking for a conflict, we need to be wary of one thing - if the two diffs recommend
                ## changing something on the same line, except the change they recommend is also identical, then it's not
                ## a conflict!

                test $num_changes_branch -le $num_changes_current && outer_loop="$changes_branch" && inner_loop="$changes_current" &&
                outer_file=".shrug/.$1/.log/$latest_branch_version-$filename" && 
                inner_file=".shrug/.$branch/.log/$latest_current_version-$filename"

                test $num_changes_branch -gt $num_changes_current && outer_loop="$changes_current" && inner_loop="$changes_branch" && 
                outer_file=".shrug/.$branch/.log/$latest_current_version-$filename" && 
                inner_file=".shrug/.$1/.log/$latest_branch_version-$filename"
                ## to armour against this, we can compare the destination line offered by the diff between both files.
                for outer_changes in $outer_loop
                do
                    outer_src=`echo $outer_changes | sed 's/[acd]/ /g' | cut -d ' ' -f1`
                    outer_dest=`echo $outer_changes | sed 's/[acd]/ /g' | cut -d ' ' -f2`
                    for inner_changes in $inner_loop
                    do
                        inner_src=`echo $inner_changes | sed 's/[acd]/ /g' | cut -d ' ' -f1`
                        inner_dest=`echo $inner_changes | sed 's/[acd]/ /g' | cut -d ' ' -f2`

                        ## to check for a potential conflict, we then need to see if the two src
                        ## we have found, have ANY common numbers at all.
                        
                        single_change_outer=`echo "$outer_src" | egrep ',' | wc -l`
                        single_change_inner=`echo "$inner_src" | egrep ',' | wc -l`

                        ## in order to identify the conflicts properly, we have to go through these main cases:
                        ## 1) one change is of the form 1,2 and the other is a single number, 6
                        ## 2) reverse of the above
                        ## 3) both changes are of the form 1,2
                        ## 4) both changes are singular

                        ## to identify a conflict in 1 or 2, we need to see if the singular number falls in the
                        ## range, inclusive, of the range from the other change.
                        ## to identify a conflict in 3, we need to see if the two ranges intersect.
                        ## finally for singular, we can just see if it's equal or not.

                        potential_conflict=0
                        if test $single_change_outer -gt 0 && test $single_change_inner -eq 0; then
                            ## Case 1)
                            range_lo=`echo $outer_src | tr ',' '\n' | head -1`
                            range_hi=`echo $outer_src | tr ',' '\n' | tail -1`
                            if test $inner_src -ge $range_lo && test $inner_src -le $range_hi; then
                                potential_conflict=1
                            fi

                        elif test $single_change_outer -eq 0 && test $single_change_inner -gt 0; then
                            ## Case 2)
                            range_lo=`echo $inner_src | tr ',' '\n' | head -1`
                            range_hi=`echo $inner_src | tr ',' '\n' | tail -1`
                            if test $outer_src -ge $range_lo && test $outer_src -le $range_hi; then
                                potential_conflict=1
                            fi

                        elif test $single_change_outer -gt 0 && test $single_change_inner -gt 0; then
                            ## Case 3)
                            range_outer_lo=`echo $outer_src | tr ',' '\n' | head -1`
                            range_outer_hi=`echo $outer_src | tr ',' '\n' | tail -1`
                            range_inner_lo=`echo $inner_src | tr ',' '\n' | head -1`
                            range_inner_hi=`echo $inner_src | tr ',' '\n' | tail -1`
                            ## the below is the classic way of finding if two ranges intersect, where
                            ## range 1 is x1 <= x2 and y1 <= y2: the test is x1 <= y2 && y1 <= x2
                            if test $range_outer_lo -le $range_inner_hi && test $range_inner_lo -le $range_outer_hi; then
                                potential_conflict=1
                            fi
                        else
                            ## Case 4)
                            test $inner_src -eq $outer_src && potential_conflict=1
                        fi
                        if test $potential_conflict -gt 0; then
                            outer_proposed=`sed -n "$outer_dest"p "$outer_file"`
                            inner_proposed=`sed -n "$inner_dest"p "$inner_file"`

                            if ! test "$outer_proposed" = "$inner_proposed"; then
                                error="true"
                                errorfiles="$errorfiles$filename "
                            fi 
                        fi
                    done
                done
            else
                copyall="true"
            fi
        fi
    done
    
    
    if test "$error" = "true"; then
        >&2 echo "shrug-merge: error: These files can not be merged:"
        for nomerge in $errorfiles
        do
            >&2 echo "$nomerge"
        done
        exit 1
    fi

    if test "$error" = "false" && test "$copyall" = "true"; then
        ## to check if we fast forward, or are already up to date, we diff the currdir file 
        ## with the branch file.
        fast_forward="false"
        for file in .shrug/.$1/.files/*
        do  
            filename=`basename $file`
            ## before we continue our check, we first need to see if we have any files that are
            ## simply untracked and need no copying besides into the current directory:
            # echo "exploring $file"

            if ! test -f ".shrug/.$branch/$filename" && ! test -f ".shrug/.$branch/.index/$filename" && 
            ! test -f ".shrug/.$1/$filename" && ! test -f ".shrug/.$1/.index/$filename"; then
                cp "$file" ./
                continue
            fi

            ## if the file doesnt exist already, then straight away we need to do a fast foward:
            test "$filename" = "*" && continue
            if ! test -f "$filename"; then
                fast_forward="true"
            fi

            difference=0
            test -f "$filename" && difference=`diff "$filename" "$file" | wc -l`
            test $difference -gt 0 && fast_forward="true"
            if test $fast_forward="true"; then
                index_and_curr=0
                index_and_repo=0
                
                test -f ".shrug/.$branch/.index/$filename" &&
                index_and_curr=`diff "$filename" ".shrug/.$branch/.index/$filename" | wc -l`
                
                test -f ".shrug/.$branch/$filename" && test -f ".shrug/.$branch/$filename" &&
                index_and_repo=`diff "$filename" ".shrug/.$branch/$filename" | wc -l`

                if test $index_and_curr -gt 0 || test $index_and_repo -gt 0; then
                    >&2 echo "shrug-merge: error: can not merge: local changes to files"
                    exit 1
                else
                    cp "$file" ./
                    cp "$file" ".shrug/.$branch/"
                    cp "$file" ".shrug/.$branch/.index/"
                    cp "$file" ".shrug/.$branch/.files/"
                    logs=`ls ".shrug/.$1/.log" | egrep "$filename"`
                    for logfile in $logs
                    do
                        cp ".shrug/.$1/.log/$logfile" ".shrug/.$branch/.log"
                    done
                fi
            fi
        done

        ## so we've checked if any existing files are different or new, but we haven't checked
        ## for deleted files! so let's find if there's any deleted ones that have a log file - if so,
        ## we need to copy all of them in.

        if test "$fast_forward" = "false"; then
            logfiles=`ls .shrug/.$1/.log/ | egrep -v "(status|bin|log).txt" | sort | uniq`
            for file in $logfiles
            do  
                if test -f ".shrug/.$branch/.log/$file"; then
                    continue
                fi
                filename=`echo $file | sed 's/^.-//'`
                if ! test -f "$filename"; then
                    copies=`ls .shrug/.$1/.log/ | egrep "$filename"`
                    for copy in $copies
                    do
                        cp ".shrug/.$1/.log/$copy" ".shrug/.$branch/.log"
                    done
                    fast_forward="true"
                fi
            done
        fi
        test "$fast_forward" = "false" && echo "Already up to date" && exit 0
        test "$fast_forward" = "true" && echo "Fast-forward: no commit created" &&
        cat ".shrug/.$1/.log/log.txt" >> ".shrug/.$branch/.log/log.txt" && exit 0
    fi

    committed=0
    test "$error" = "false" && test "$copyall" = "false" &&
    for file in .shrug/.$1/.files/*
    do
        filename=`basename $file`
        test "$filename" = "*" && continue
        if test -f "$filename"; then
            latest_branch_version=`ls ".shrug/.$1/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1 | sort | tail -1`
            latest_current_version=`ls ".shrug/.$branch/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1 | sort | tail -1`

            ## what we need to do here is ensure that we don't work with any untracked, uncommitted files:
            test "$latest_branch_version" = "" && test "$latest_current_version" = "" && continue
            branch_versions=`ls ".shrug/.$1/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1`
            current_versions=`ls ".shrug/.$branch/.log" | egrep "$filename" | egrep -v "(status|bin|log).txt" | cut -d '-' -f1`
            
            latest_common=""
            for version in $branch_versions
            do  
                if test -f ".shrug/.$branch/.log/$version-$filename"; then
                    latest_common="$version-$filename"
                fi
            done

            latest_common_commit=".shrug/.$branch/.log/$latest_common"

            ## The strategy here, is to go with deletions, then replacements, then additions.
            ## My working in understanding this is in merge_cases_working.

            ## Firstly before we get started in merging stuff, let's check if we are already up to date.
            curr_and_branch=`diff "$filename" ".shrug/.$1/.log/$latest_branch_version-$filename" | wc -l`            
            test $curr_and_branch -eq 0 && echo "Already up to date" && exit 0

            ## Secondly, let's make sure that we don't have any local changes:
            index_and_curr=0
            index_and_repo=0
            
            test -f ".shrug/.$branch/.index/$filename" &&
            index_and_curr=`diff "$filename" ".shrug/.$branch/.index/$filename" | wc -l`
            
            test -f ".shrug/.$branch/$filename" && test -f ".shrug/.$branch/$filename" &&
            index_and_repo=`diff "$filename" ".shrug/.$branch/$filename" | wc -l`

            if test $index_and_curr -gt 0 || test $index_and_repo -gt 0; then
                >&2 echo "shrug-merge: error: can not merge: local changes to files"
                exit 1
            fi

            ## To do the merging, we want to compare our file from the branch getting merged into our current branch, and the file
            ## of our current branch, with their latest common commit.
            branch_and_first=`diff "$latest_common_commit" ".shrug/.$1/.log/$latest_branch_version-$filename" | egrep "[0-9][cad][0-9]"`
            curr_and_first=`diff "$latest_common_commit" ".shrug/.$branch/.log/$latest_current_version-$filename" | egrep "[0-9][cad][0-9]"`
            
            branch_deletions=`echo "$branch_and_first" | egrep 'd'`
            curr_deletions=`echo "$curr_and_first" | egrep 'd'`
            branch_replacements=`echo "$branch_and_first" | egrep 'c'`
            curr_replacements=`echo "$curr_and_first" | egrep 'c'`
            branch_additions=`echo "$branch_and_first" | egrep 'a' | sed 's/[0-9]$/\0-branch/g'`
            curr_additions=`echo "$curr_and_first" | egrep 'a' | sed 's/[0-9]$/\0-current/g'`
            
            if test "$branch_deletions" = "" && test "$branch_replacements" = "" && test "$branch_additions" = "" && 
            test "$curr_deletions" = "" && test "$curr_replacements" = "" && test "$curr_additions" = ""; then
                cp "$file" ./
                cp "$file" ".shrug/.$branch/"
                cp "$file" ".shrug/.$branch/.index/"
                cp "$file" ".shrug/.$branch/.files/"
                logs=`ls ".shrug/.$1/.log" | egrep "$filename"`
                for logfile in $logs
                do
                    cp ".shrug/.$1/.log/$logfile" ".shrug/.$branch/.log"
                done
            fi

            echo "Auto-merging $filename"
            
            ## from these diffs, we want to go through the deletions and do them first - going from bottom to top in the file.
            deletions=`printf "$branch_deletions\n$curr_deletions\n" | tr ' ' '\n' | sort -r | egrep -v "^$"`
            cat $latest_common_commit > $filename

            for deletion in $deletions
            do
                src=`echo $deletion | cut -d 'd' -f1 | tr ',' '\n'| tr '\n' ',' | sed 's/,$//'`
                dest=`echo $deletion | cut -d 'd' -f2 | tr ',' '\n'| tr '\n' ',' | sed 's/,$//'`
                sed -i "${src}d" $filename
            done
            
            ## from these diffs, we now look through the replacements and do them next - any order is fine.
            for changes in $branch_replacements
            do
                src=`echo $changes | cut -d 'c' -f1 | tr ',' '\n' | sort -r | tr '\n' ',' | sed 's/,$//'`
                dest=`echo $changes | cut -d 'c' -f2 | tr ',' '\n' | sort -r | tr '\n' ',' | sed 's/,$//'`
                destline=`sed -n "$dest"p ".shrug/.$1/.log/$latest_branch_version-$filename"`
                sed -i $src's/.*/'$destline/ $filename
            done
            
            for changes in $curr_replacements
            do
                src=`echo $changes | cut -d 'c' -f1 | tr ',' '\n' | sort -r | tr '\n' ',' | sed 's/,$//'`
                dest=`echo $changes | cut -d 'c' -f2 | tr ',' '\n' | sort -r | tr '\n' ',' | sed 's/,$//'`
                destline=`sed -n "$dest"p ".shrug/.$branch/.log/$latest_current_version-$filename"`
                sed -i $src's/.*/'$destline/ $filename
            done

            ## from these diffs, we finally look through the additions and do them last - go from bottom of file like deletions.
            additions=`printf "$branch_additions\n$curr_additions\n" | tr ' ' '\n' | sort -r | egrep -v "^$"`
            for addition in $additions
            do
                total=`cat $filename | wc -l`
                src=`echo $addition | cut -d 'a' -f1`
                dest=`echo $addition | cut -d 'a' -f2`
                dest=`echo $dest | cut -d '-' -f1`
                
                is_branch=`echo $addition | egrep 'branch' | wc -l`
                is_curr=`echo $addition | egrep 'current' | wc -l`
                test "$is_branch" = "1" && destline=`sed -n "$dest"p ".shrug/.$1/.log/$latest_branch_version-$filename"`
                test "$is_curr" = "1" && destline=`sed -n "$dest"p ".shrug/.$branch/.log/$latest_current_version-$filename"`
                dest=`echo $dest | tr ',' '\n' | sort -r`
                for line_num in $src
                do
                    lines_in_addition=`echo "$destline" | wc -l`
                    if test $lines_in_addition -eq 1; then
                        test $line_num -le $total && test $line_num -eq 0 && sed -i '1 i'\\"$destline" $filename
                        test $line_num -le $total && test $line_num -gt 0 && sed -n -i 'p;'"$line_num"a\ "$destline" $filename
                        test $line_num -gt $total && echo $destline >> $filename
                    else
                        destline=`echo "$destline" | sort -nr`
                        for line in $destline
                        do
                            test $line_num -le $total && test $line_num -eq 0 && sed -i '1 i'\\"$line" $filename
                            test $line_num -le $total && test $line_num -gt 0 && sed -n -i 'p;'"$line_num"a\ "$line" $filename
                            test $line_num -gt $total && echo "$destline" | sort -n >> $filename && break
                        done
                    fi
                done
            done
            committed=$(( $committed + 1 ))
            cp "$file" ".shrug/.$branch/.merged"
        else
            cp "$file" ./
            cp "$file" ".shrug/.$branch/"
            cp "$file" ".shrug/.$branch/.index/"
            cp "$file" ".shrug/.$branch/.files/"
            logs=`ls ".shrug/.$1/.log" | egrep "$filename"`
            for logfile in $logs
            do
                cp ".shrug/.$1/.log/$logfile" ".shrug/.$branch/.log"
            done
        fi
    done
    test $committed -gt 0 && echo "t" > ".shrug/.$branch/.merged/merge.txt" &&
    sh shrug-commit -a -m "$3" && 
    cat ".shrug/.$1/.log/log.txt" >> ".shrug/.$branch/.log/log.txt"
fi
